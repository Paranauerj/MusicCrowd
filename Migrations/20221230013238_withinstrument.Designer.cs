// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoCrowdsourcing;

#nullable disable

namespace ProjetoCrowdsourcing.Migrations
{
    [DbContext(typeof(BaseContext))]
    [Migration("20221230013238_withinstrument")]
    partial class withinstrument
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.Assignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Evaluated")
                        .HasColumnType("bit");

                    b.Property<int>("HITId")
                        .HasColumnType("int");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("HITId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.HIT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HITId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instrument")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HITs");
                });

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.ValidationHIT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HITId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId")
                        .IsUnique();

                    b.ToTable("ValidationHITs");
                });

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.Assignment", b =>
                {
                    b.HasOne("ProjetoCrowdsourcing.Models.HIT", "HIT")
                        .WithMany("Assignments")
                        .HasForeignKey("HITId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HIT");
                });

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.ValidationHIT", b =>
                {
                    b.HasOne("ProjetoCrowdsourcing.Models.Assignment", "Assignment")
                        .WithOne("ValidationHIT")
                        .HasForeignKey("ProjetoCrowdsourcing.Models.ValidationHIT", "AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.Assignment", b =>
                {
                    b.Navigation("ValidationHIT")
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetoCrowdsourcing.Models.HIT", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
